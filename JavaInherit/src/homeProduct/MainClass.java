package homeProduct;

public class MainClass {

	public static void main(String[] args) {
		
		TV tv=new TV("삼성", 1000000);
		tv.brand="삼성";
		tv.power();
		tv.power();
//		tv.channelUP();
		
		Aircon air=new Aircon();
		air.brand="LG휘센";
		System.out.println(air.brand);
		air.power();
		air.power();
		air.windControl();
		
		System.out.println("다형성");
		House tv2=new TV("LG",1500000);
		tv2.power();
		House item=new TV("삼성",1750000);
		item.power();
		item=new Aircon("휘센", 1030000);
		//item.windControl();
		//부모 클래스의 타입으로 만든 변수는 부모 클래스의 변수(필드)와 메서드만 사용할 수 있음
		//하위 클래스는 상위 클래스의 것을 사용할 수 있지만 역은 불가
		//House[] arr= {new TV(), new Aircon(), new Computer()};
		//하나의 타입 배열에 여러 타입 변수를 넣을 수 있음- 다형성
	}

}
//클래스의 관계
//상속 관계에 놓은 클래스는 부모 클래스와 자식 클래스로 나뉨
//부모 클래스의 필드(변수), 메서드를 하위 클래스(자식 클래스)에서 사용 가능
//1. 상속은 재사용을 위해 사용- 여러 클래스 간의 중복 코드를 하나의 클래스로 통합시켜 사용
//2. 상위 클래스(부모 클래스)의 필드(변수), 메서드를 모두 하위 클래스(자식 클래스)에서 사용할 수는 없음- 제어자, 패키지에 따라 제한적
//3. 하위 클래스(자식 클래스)에서 부모를 지칭하는 예약어: super



//클래스 상속 : 자식클래스 extends 부모클래스
//extends- 확장, 연장 등
//상속 하는 가장 큰 이유 → 다형성: 하나의 타입으로 여러 타입을 제어·사용하는 것
//부모 클래스의 인스턴스 변수와 인스턴스 메서드, 클래스 변수, 클래스 메서드 사용 가능
//단, 부모 클래스의 모든 걸 사용할 수 있는 것은 아님. 일부 제어가 걸린 변수나 메서드는 사용 불가
//자식 클래스마다 부모 클래스의 객체와 메서드 존재

//생성자 메서드를 통한 인스턴스 변수는 변수를 가지고 있는 클래스에서 초기화
//동작에 오류가 생기지는 않지만 변수의 위치가 오해되기 쉬움

//개발이 끝이 아니라 유지보수까지 생각하는 것이 좋음

/*
   자바의 제어자
   	  1. static  : 클래스의 정적 변수, 정적 메서드
   	  			   클래스에서 객체들이 공동으로 사용할 수 있는 변수, 메서드
   	  			   객체에 속하지 않고 클래스에 속함
   	  			   클래스명.static 변수명, 클래스명.static 메서트();
   	  2. abstract: 추상 클래스, 추상 메서드
   	  			   미완성의 의미
   	  			   추상 클래스의 객체 생성 불가
   	  3. final   : 변경되지 않는 의미
   	  			   변수 앞에 final을 붙이면 변수 값 변경 불가
   	  			   메서드 앞에 final을 붙이면 해당 메서드는 오버라이딩 불가
   	  			   클래스 앞에 final을 붙이면 상속 불가(부모 클래스로 지정 불가)
   	  4. 접근 제어자
   	  		public   : 어디서나 누구든지 사용 가능한 제어자
   	  		default  : 같은 패키지에서만 접근 가능, 아무 제어자도 쓰지 않았을 때의 기본 상태
   	  		protected: 같은 패키지에서만 접근 가능, 상속 관계일 경우 패키지가 달라도 접근 가능
   	  			public일 경우 다른 곳에서 접근할 가능성이 있어 접근 제한을 위해 필요함
   	  		private  : 아무도 어디서도 사용 불가, 클래스 내부에서만 사용 가능
   	  			변수를 private으로 설정해 캡슐화 정보 은닉. 조작은 메서드로
   
 */